Due: Sunday 4/24/2016 @ 11:59pm

Please don't forget to edit REPORT.txt

Assignment:
~~~~~~~~~~~

This assignment is in two parts:

(1) Finish the implementation of a program that estimates the performance
characteristics of an x86 processor.

(2) Implement a simple matrix algorithm and make it run as fast as you can

Performance characterization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need to understand the performance of some x86 instructions

     add
     mov <mem>,reg
     imul
     div

     jmp
     jc (taken)
     jc (not taken)

For the non jump instructions, we need to understand two things:

    - how long does it take for an instruction to produce a value for
      another that depends on it (RAW dependency)

              add %rax,%rbx    // produces %rbx
              add %rbx,...     // uses %rbx

    - how many instances of this instruction can run per cycle

              // all instructions are independent and the processor
              // is free to run as many of them per cycle as it could
              add %rax,%rax
              add %rbx,%rbx
              add %rcx,%rcx
              ...

For that you need to write a set of functions (in sstuff.S):

    depAdds (Perform a number of dependent adds and return their count)
    indepAdds (perform a number of independent adds and return their count)
    depMuls (same for imul)
    indepMuls
    depDivs (same for div)
    indepDivs
    depLoads (same for mov <memory>,<reg>)
    indepLoads

For jump instructions, we need to find out how many cycles it takes to perform
a jump

    depUncond (perform a number of unconditional jumps and return the count)
    depTaken (same for taken conditional jumps)
    depNotTaken (same for not taken conditional jumps)
 
Each function should be written in a way that isolates the quantity being
measured as much as possible. This is usually done by doing the operation
repeatedly in order to minimize the impact of loop and function call impact
overhead.

Your implementations are expected to perform the instruction being measured
"n" times and return "n" (1000-10000 is a typical value for "n")

The main program will call your functions repeatedly and compute:

    - latency: how long does it take for the result of the instruction to be
               ready for use
    - rate: how many instructions are performed per time unit

The results are reported in nano-seconds and in processor cycles

Matrix balance optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We define matrix balance of a square matrix as the number
of upper-triangle (excluding the diagonal) elements for which:

   forAll i=1,N
      forAll j>i,N
          matrix[i][j] == matrix[j][i]

N and the matrix are declared in matrix.h, you're asked to write a function
int balance(void) that returns the balance of the global matrix and make it
run as fast as possible

The main program will call your function and estimates the cost per comparison

To compile:
~~~~~~~~~~~

    - make

To run:

    - make run

Files:

    - main.c - the main program
    - cstuff.c - put any C code you need here
    - sstuff.c - put any assemble code you need here

Hints:

    - You need to run the things you're measuring in a tight loop
    - Don't let other instructions pollute your measurements. For example, if
      you want to measure the "add" instruction, you don't want to mix it
      with lots of "mov" and "branch" instructions
    - Processors can and do run multiple instructions per cycle.
    - A dog chasing its tail is not always a bad idea
